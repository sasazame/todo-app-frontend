name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type check
      run: npm run type-check || npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint

  unit-test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test -- --coverage --passWithNoTests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results/

  build:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          .next/
          out/
        retention-days: 7

  e2e-test:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./build-output
      continue-on-error: true
    
    - name: Install dependencies
      run: npm ci
    
    - name: Restore build artifacts or rebuild
      run: |
        if [ -d "./build-output/.next" ]; then
          echo "Using pre-built artifacts"
          mv ./build-output/.next ./
          if [ -d "./build-output/out" ]; then
            mv ./build-output/out ./
          fi
        else
          echo "Build artifacts not found, building locally..."
          npm run build
        fi
        
        # Verify build output exists
        if [ ! -d ".next" ]; then
          echo "Error: .next directory not found after build"
          exit 1
        fi
        
        echo "Build verification complete"

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium

    - name: Start application and test
      run: |
        # Start the application in background
        npm run start &
        APP_PID=$!
        
        # Wait for app to be ready
        echo "Waiting for app to start..."
        for i in {1..30}; do
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "App is ready"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
        
        # Run tests
        npm run test:e2e:smoke
        
        # Cleanup
        kill $APP_PID || true
      env:
        CI: true
        NEXT_PUBLIC_CI: true
        NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: [unit-test, build, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Vercel CLI
      run: npm install -g vercel

    - name: Deploy to Vercel
      run: |
        vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://todo-app-frontend.vercel.app
        uploadArtifacts: true
        temporaryPublicStorage: true